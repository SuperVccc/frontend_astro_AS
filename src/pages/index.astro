---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Dashboard">
	<main>
		<h1>Búsqueda API</h1>
		<h2><a href="/subscriptions/">Suscripciones</a></h2>
		<!-- Container -->
		<div class="container">
			<!-- Form API container -->
			<div class="form_api_container">
				<form>
					<div class="url_input">
						<label for="url">URL:</label>
						<input type="text" name="url" id="url" />
						<button id="searchBtn">Buscar</button>
					</div>
				</form>
				<div>
					<textarea id="apiInfo" readonly></textarea>
				</div>
			</div>
			<!-- Form create entity -->
			<div class="form_create_entity">
				<!-- Type entity -->
				<form>
					<div class="type_input">
						<label for="typeEntity">Type:</label>
						<input type="text" name="typeEntity" id="typeEntity" />
					</div>
					<div id="dynamicFieldsContainer">
						<!-- Attributes -->
						<div class="attr_input_container">
							<!-- Attr input -->
							<div class="attr_input" id="attrInputContainer">
								<label for="attrName">Attribute:</label>
								<input
									type="text"
									name="attrName"
									id="attrName"
								/>
							</div>
							<!-- Attr type -->
							<div class="attr_type">
								<label for="attrType">Att type:</label>
								<input
									type="text"
									name="attrType"
									id="attrType"
								/>
							</div>
							<!-- Attr value -->
							<div class="attr_value">
								<label for="attrValue">Att value:</label>
								<input
									type="text"
									name="attrValue"
									id="attrValue"
								/>
							</div>
						</div>
						<!-- Add more attr -->
						<div class="add_container">
							<p>Añadir atributos...</p>
							<button class="plus_button" id="addBtn">+</button>
						</div>
					</div>
				</form>
			</div>
			<!-- TextArea NGSI container -->
			<div class="textarea_ngsi_container">
				<!-- Container buttons -->
				<div class="buttons_container">
					<button class="generate_button" id="generateBtn"
						>Generar entidad</button
					>
					<button class="send_button" id="sendBtn"
						>Enviar entidad</button
					>
				</div>
				<!-- TextArea -->
				<textarea id="taJsonNGSI" readonly></textarea>
			</div>
		</div>
	</main>
</Layout>
<script>
	const URL = "http://localhost:3000/create-entity";
	const button = document.getElementById("searchBtn");
	const urlInput = document.getElementById("url");
	const apiInfo = document.getElementById("apiInfo");
	const apiResponse = {
		RESPONSE: null,
		DATA: null,
		ERROR: "Error al obtener los datos de la api...",
	};
	const addBtn = document.getElementById("addBtn");
	const typeEntityInput = document.getElementById("typeEntity");
	const attrName = document.getElementById("attrName");
	const attrType = document.getElementById("attrType");
	const attrValue = document.getElementById("attrValue");
	const generateJsonNGSI = document.getElementById("generateBtn");
	const sendBtn = document.getElementById("sendBtn");
	const textareaNGSI = document.getElementById("taJsonNGSI");
	const form = {
		ENTITY_TYPE: typeEntityInput,
		ATTR_NAME: attrName,
		ATTR_TYPE: attrType,
		ATTR_VALUE: attrValue,
	};
	const jsonNGSIArray = [];

	const fetchData = async (url: string) => {
		const res = await fetch(url);
		if (!res.ok) {
			apiResponse.RESPONSE = res.ok;
			throw new Error("Error al obtener los datos de la api");
		}
		apiResponse.RESPONSE = res.ok;
		return await res.json();
	};

	const populateTextarea = (info) => {
		if (!info.RESPONSE) {
			apiInfo.textContent = info.ERROR;
			return;
		}
		apiInfo.value = JSON.stringify(info.DATA, null, 2);
	};

	const createJsonNGSI = (form) => {
		let contador = 1;
		const jsonNGSI = {
			id: `${form.ENTITY_TYPE.value}_${contador}`,
			type: form.ENTITY_TYPE.value,
		};
		jsonNGSI[form.ATTR_NAME.value] = {
			type: form.ATTR_TYPE.value,
			value: form.ATTR_VALUE.value,
		};
		return jsonNGSI;
	};

	const obtainAttrValue = (json, attr) => {
		if (
			json.hasOwnProperty("results") &&
			Array.isArray(json.results) &&
			json.results.length > 0
		) {
			const primerResultado = json.results[0];
			if (primerResultado.hasOwnProperty(attr)) {
				return primerResultado[attr];
			} else {
				console.error(
					`El atributo "${attr}" no existe en el primer resultado.`,
				);
				return null;
			}
		} else {
			console.error("El JSON no contiene resultados válidos.");
			return null;
		}
	};

	const obtainAttrValue_2 = (json, attr) => {
		if (json.hasOwnProperty(attr)) {
			if (json.hasOwnProperty(attr)) {
				return json[attr];
			} else {
				console.error(
					`El atributo "${attr}" no existe en el primer resultado.`,
				);
				return null;
			}
		} else {
			console.error("El JSON no contiene resultados válidos.");
			return null;
		}
	};

	const createJsonNGSI_2 = (form, originalJson) => {
		const attr = obtainAttrValue(originalJson, form.ATTR_VALUE.value);
		let jsonNGSI = {};
		if (attr != null) {
			let contador = 1;
			jsonNGSI = {
				id: `${form.ENTITY_TYPE.value}_${contador}`,
				type: form.ENTITY_TYPE.value,
			};
			jsonNGSI[form.ATTR_NAME.value] = {
				type: form.ATTR_TYPE.value,
				value: attr,
			};
		}
		return jsonNGSI;
	};

	const createJsonNGSI_3 = (form, originalJson) => {
		const fields = document.querySelectorAll(".attr_input_container");

		let jsonNGSI = {};
		let contador = 1;

		fields.forEach((fieldSet) => {
			const attrNameInput =
				fieldSet.querySelector('[name="attrName"]').value;
			const attrTypeInput =
				fieldSet.querySelector('[name="attrType"]').value;
			const attrValueInput =
				fieldSet.querySelector('[name="attrValue"]').value;
			const attrVal = obtainAttrValue(originalJson, attrValueInput);
			if (attrVal !== null) {
				const attrJson = {
					type: attrTypeInput,
					value: attrVal,
				};

				jsonNGSI[attrNameInput] = attrJson;
			} else {
				console.error(
					`El atributo "${attrNameInput}" no existe en el JSON original.`,
				);
			}
		});

		const entityID = `${form.ENTITY_TYPE.value}_${contador}`;
		jsonNGSI = {
			id: entityID,
			type: form.ENTITY_TYPE.value,
			...jsonNGSI,
		};

		contador++;

		return jsonNGSI;
	};

	const createJsonNGSI_4 = (form, originalJson) => {
		let contador = 1;
		originalJson.results.forEach((result) => {
			const fields = document.querySelectorAll(".attr_input_container");
			let jsonNGSI = {};
			fields.forEach((fieldSet) => {
				const attrNameInput =
					fieldSet.querySelector('[name="attrName"]').value;
				const attrTypeInput =
					fieldSet.querySelector('[name="attrType"]').value;
				const attrValueInput =
					fieldSet.querySelector('[name="attrValue"]').value;
				const attrVal = obtainAttrValue_2(result, attrValueInput);
				if (attrVal !== null) {
					const attrJson = {
						type: attrTypeInput,
						value: attrVal,
					};

					jsonNGSI[attrNameInput] = attrJson;
				} else {
					console.error(
						`El atributo "${attrValueInput}" no existe en el JSON original.`,
					);
				}
			});
			const entityID = `${form.ENTITY_TYPE.value}_${contador}`;
			jsonNGSI = {
				id: entityID,
				type: form.ENTITY_TYPE.value,
				...jsonNGSI,
			};
			contador++;

			jsonNGSIArray.push(jsonNGSI);
		});

		return jsonNGSIArray;
	};

	const sendNGSIJson = async (url = "", data = {}) => {
		const res = await fetch(url, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify(data),
		});
		if (!res.ok) {
			const error = new Error("Error al enviar JSON a NGSI");
			error.stack = res.statusText;
			throw error;
		}
		return res;
	};

	button.addEventListener("click", async (e) => {
		e.preventDefault();
		try {
			apiResponse.DATA = await fetchData(urlInput.value);
			if (apiResponse != null) {
				populateTextarea(apiResponse);
			}
		} catch (error) {
			console.error(error);
			populateTextarea(apiResponse);
		}
	});

	generateJsonNGSI.addEventListener("click", (e) => {
		e.preventDefault();
		const json = createJsonNGSI_4(form, apiResponse.DATA);
		textareaNGSI.value = JSON.stringify(json, null, 2);
	});

	addBtn.addEventListener("click", (e) => {
		e.preventDefault();
		const dynamicFieldsContainer = document.getElementById(
			"dynamicFieldsContainer",
		);
		const clonedFieldSet =
			dynamicFieldsContainer.firstElementChild.cloneNode(true);

		const inputs = clonedFieldSet.querySelectorAll("input");
		inputs.forEach((input) => (input.value = ""));

		const addContainer = document.querySelector(".add_container");
		addContainer.parentNode.insertBefore(clonedFieldSet, addContainer);
	});

	// TODO: Arreglar el cors
	sendBtn.addEventListener("click", async (e) => {
		e.preventDefault();
		if (jsonNGSIArray != null) {
			for (const entity of jsonNGSIArray) {
				try {
					const serverRes = await sendNGSIJson(URL, entity);
					if (serverRes.status !== 201) {
						console.error(
							`No se ha creado la entity con id: ${entity.id}`
						);
						continue;
					}
					console.log(`Se ha creado la entity con id: ${entity.id}`);
				} catch (error) {
					console.error(error);
				}
			}
		}
	});
</script>

<style>
	main {
		display: grid;
		grid-template-columns: 1fr;
		justify-items: center;
	}

	.container {
		max-width: 1240px;
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		justify-content: space-between;
		align-content: center;
		gap: 2rem;
	}

	textarea {
		height: 80vh;
		width: 25vw;
		resize: none;
	}

	.id_input,
	.type_input,
	.attr_input,
	.attr_type,
	.attr_value {
		display: flex;
		flex-direction: column;
		margin-bottom: 1rem;
	}

	.form_api_container {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: start;
	}

	.attr_input_container {
		display: flex;
		flex-direction: column;
	}

	.buttons_container {
		display: flex;
		justify-content: space-around;
	}

	.add_container {
		display: flex;
		justify-content: end;
	}
</style>
